//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Caramel_DataHostClient`, then call methods of this protocol to make API calls.
internal protocol Caramel_DataHostClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? { get }

  func publishJointData(
    callOptions: CallOptions?,
    handler: @escaping (Caramel_JointsResponse) -> Void
  ) -> BidirectionalStreamingCall<Caramel_DataJoint, Caramel_JointsResponse>

  func pingDriverService(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Caramel_StatusResponse>
}

extension Caramel_DataHostClientProtocol {
  internal var serviceName: String {
    return "caramel.DataHost"
  }

  /// Bidirectional streaming call to PublishJointData
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func publishJointData(
    callOptions: CallOptions? = nil,
    handler: @escaping (Caramel_JointsResponse) -> Void
  ) -> BidirectionalStreamingCall<Caramel_DataJoint, Caramel_JointsResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Caramel_DataHostClientMetadata.Methods.publishJointData.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishJointDataInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to PingDriverService
  ///
  /// - Parameters:
  ///   - request: Request to send to PingDriverService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pingDriverService(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Caramel_StatusResponse> {
    return self.makeUnaryCall(
      path: Caramel_DataHostClientMetadata.Methods.pingDriverService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingDriverServiceInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Caramel_DataHostClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Caramel_DataHostNIOClient")
internal final class Caramel_DataHostClient: Caramel_DataHostClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Caramel_DataHostClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the caramel.DataHost service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Caramel_DataHostNIOClient: Caramel_DataHostClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Caramel_DataHostClientInterceptorFactoryProtocol?

  /// Creates a client for the caramel.DataHost service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Caramel_DataHostAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? { get }

  func makePublishJointDataCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Caramel_DataJoint, Caramel_JointsResponse>

  func makePingDriverServiceCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Caramel_StatusResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Caramel_DataHostAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Caramel_DataHostClientMetadata.serviceDescriptor
  }

  internal var interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makePublishJointDataCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Caramel_DataJoint, Caramel_JointsResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Caramel_DataHostClientMetadata.Methods.publishJointData.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishJointDataInterceptors() ?? []
    )
  }

  internal func makePingDriverServiceCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Caramel_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Caramel_DataHostClientMetadata.Methods.pingDriverService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingDriverServiceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Caramel_DataHostAsyncClientProtocol {
  internal func publishJointData<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Caramel_JointsResponse> where RequestStream: Sequence, RequestStream.Element == Caramel_DataJoint {
    return self.performAsyncBidirectionalStreamingCall(
      path: Caramel_DataHostClientMetadata.Methods.publishJointData.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishJointDataInterceptors() ?? []
    )
  }

  internal func publishJointData<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Caramel_JointsResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Caramel_DataJoint {
    return self.performAsyncBidirectionalStreamingCall(
      path: Caramel_DataHostClientMetadata.Methods.publishJointData.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishJointDataInterceptors() ?? []
    )
  }

  internal func pingDriverService(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Caramel_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Caramel_DataHostClientMetadata.Methods.pingDriverService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingDriverServiceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Caramel_DataHostAsyncClient: Caramel_DataHostAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Caramel_DataHostClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Caramel_DataHostClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Caramel_DataHostClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'publishJointData'.
  func makePublishJointDataInterceptors() -> [ClientInterceptor<Caramel_DataJoint, Caramel_JointsResponse>]

  /// - Returns: Interceptors to use when invoking 'pingDriverService'.
  func makePingDriverServiceInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Caramel_StatusResponse>]
}

internal enum Caramel_DataHostClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DataHost",
    fullName: "caramel.DataHost",
    methods: [
      Caramel_DataHostClientMetadata.Methods.publishJointData,
      Caramel_DataHostClientMetadata.Methods.pingDriverService,
    ]
  )

  internal enum Methods {
    internal static let publishJointData = GRPCMethodDescriptor(
      name: "PublishJointData",
      path: "/caramel.DataHost/PublishJointData",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let pingDriverService = GRPCMethodDescriptor(
      name: "PingDriverService",
      path: "/caramel.DataHost/PingDriverService",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Caramel_DataHostProvider: CallHandlerProvider {
  var interceptors: Caramel_DataHostServerInterceptorFactoryProtocol? { get }

  func publishJointData(context: StreamingResponseCallContext<Caramel_JointsResponse>) -> EventLoopFuture<(StreamEvent<Caramel_DataJoint>) -> Void>

  func pingDriverService(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Caramel_StatusResponse>
}

extension Caramel_DataHostProvider {
  internal var serviceName: Substring {
    return Caramel_DataHostServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PublishJointData":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Caramel_DataJoint>(),
        responseSerializer: ProtobufSerializer<Caramel_JointsResponse>(),
        interceptors: self.interceptors?.makePublishJointDataInterceptors() ?? [],
        observerFactory: self.publishJointData(context:)
      )

    case "PingDriverService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Caramel_StatusResponse>(),
        interceptors: self.interceptors?.makePingDriverServiceInterceptors() ?? [],
        userFunction: self.pingDriverService(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Caramel_DataHostAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Caramel_DataHostServerInterceptorFactoryProtocol? { get }

  func publishJointData(
    requestStream: GRPCAsyncRequestStream<Caramel_DataJoint>,
    responseStream: GRPCAsyncResponseStreamWriter<Caramel_JointsResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func pingDriverService(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Caramel_StatusResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Caramel_DataHostAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Caramel_DataHostServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Caramel_DataHostServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Caramel_DataHostServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PublishJointData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Caramel_DataJoint>(),
        responseSerializer: ProtobufSerializer<Caramel_JointsResponse>(),
        interceptors: self.interceptors?.makePublishJointDataInterceptors() ?? [],
        wrapping: { try await self.publishJointData(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "PingDriverService":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Caramel_StatusResponse>(),
        interceptors: self.interceptors?.makePingDriverServiceInterceptors() ?? [],
        wrapping: { try await self.pingDriverService(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Caramel_DataHostServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'publishJointData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishJointDataInterceptors() -> [ServerInterceptor<Caramel_DataJoint, Caramel_JointsResponse>]

  /// - Returns: Interceptors to use when handling 'pingDriverService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingDriverServiceInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Caramel_StatusResponse>]
}

internal enum Caramel_DataHostServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DataHost",
    fullName: "caramel.DataHost",
    methods: [
      Caramel_DataHostServerMetadata.Methods.publishJointData,
      Caramel_DataHostServerMetadata.Methods.pingDriverService,
    ]
  )

  internal enum Methods {
    internal static let publishJointData = GRPCMethodDescriptor(
      name: "PublishJointData",
      path: "/caramel.DataHost/PublishJointData",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let pingDriverService = GRPCMethodDescriptor(
      name: "PingDriverService",
      path: "/caramel.DataHost/PingDriverService",
      type: GRPCCallType.unary
    )
  }
}
